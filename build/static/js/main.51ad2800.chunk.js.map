{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["delay","interval","Promise","resolve","setTimeout","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","icon","marginLeft","letterSpacing","title","App","classes","useState","data","setData","setErrors","console","log","tweet_impressions","useEffect","a","fetch","json","then","res","catch","err","fetchData","className","Grid","container","item","xs","Paper","Link","style","color","href","underline","tweet_count","id","follow_count","profile_visits","dataSource","sourceType","screenName","options","username","height","width","onLoad","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.51ad2800.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\nimport { FaGithub, FaTwitter, FaReact , FaPython} from \"react-icons/fa\";\nimport axios from 'axios';\nimport { Timeline, Follow } from 'react-twitter-widgets'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\n\nconst delay = interval => new Promise(resolve => setTimeout(resolve, interval));\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  icon: {\n    marginLeft: '5px',\n    letterSpacing: '1em',\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [data, setData] = useState({});\n  const [hasError, setErrors] = useState(false);\n  console.log(data.tweet_impressions)\n\n  useEffect(() => {\n    async function fetchData() {\n      console.log(data.tweet_impressions)\n      const res = await fetch(\"https://dbf5f47e298a.ngrok.io\");\n      res\n        .json()\n        .then(res => setData(res))\n        .catch(err => setErrors(err));\n        await delay(10000);\n    }\n    console.log(data.tweet_impressions)\n    if(data.tweet_impressions == null){\n      fetchData();\n    }\n  });\n\n  return (\n    <div>\n    <div className=\"App\">\n      <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <Paper className={classes.paper}>\n          <h1>Tennis Tweets </h1> \n          <h2 className = {classes.icon}>\n          <Link style={{ color: 'rgb(0, 184, 230)' }} href=\"https://twitter.com/TennisScores2\" underline = \"none\"> <FaTwitter /></Link>\n            <Link style={{ color: 'rgb(0, 184, 230)' }} href=\"https://github.com/jschriemer/Tennis-Tweets\" underline = \"none\"> <FaGithub /></Link> \n            <Link style={{ color: 'rgb(0, 184, 230)' }} href=\"https://reactjs.org/\" underline = \"none\" > <FaReact /></Link>\n            <Link style={{ color: 'rgb(0, 184, 230)' }} href=\"https://github.com/jschriemer/Tennis-Tweets\" underline = \"none\"> <FaPython /></Link></h2>\n          <h2> What is it? </h2>\n          <p>Tennis Tweets is a Twitter bot that live tweets ATP & ITF tennis scores.\n            I created this because <br></br>I am a tennis fan and I wanted to learn more about internet bots and web scraping. </p>\n          <h2>What was it built with?</h2>\n          <p>Built with Python and JavaScript (React) using the TwitterAPI, Tweepy, BeautifulSoup, and Selenium.</p>\n          <h2>Monthly Statistics</h2>\n          <Grid container spacing={2}>\n            <Grid item xs={3}>\n              <h3>{data.tweet_count}</h3>\n              <p id = \"stat\">All Time Tweets</p>\n            </Grid>\n            <Grid item xs={3}>\n            <h3>{data.tweet_impressions}</h3>\n              <p id = \"stat\">Tweet Impressions</p>\n            </Grid>\n            <Grid item xs={3}>\n              <h3>{data.follow_count}</h3>\n              <p id = \"stat\">Followers</p>\n            </Grid>\n            <Grid item xs={3}>\n            <h3>{data.profile_visits}</h3>\n              <p id = \"stat\">Profile Visits</p>\n            </Grid>\n          </Grid>\n          </Paper>\n        </Grid>\n      <Grid item xs={4}>\n      <Paper className={classes.paper}>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'tennisscores2'\n          }}\n          options={{\n            username: 'Tennis_Tweets',\n            height: '550',\n            width: '300'\n          }}\n          onLoad={() => console.log('Timeline is loaded! :)' + data)}\n          />\n        </Paper>\n        </Grid>\n      </Grid>\n    </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}